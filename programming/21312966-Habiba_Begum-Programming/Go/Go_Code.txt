package main

import (
	"fmt"
	"math/rand"
	"time"
)

var easy_Words = []string{"feather", "green", "machine", "serene", "complete"}
var medium_Words = []string{"serenity", "purple", "brown", "reference", "activity"}
var hard_Words = []string{"dissonance", "suffrage", "liberty", "rhythm", "jazz"}

// array of words for levels

func chooseWord(words []string) string {
	randomNum := rand.New(rand.NewSource(time.Now().UnixNano()))
	//makes sure every time different number
	return words[randomNum.Intn(len(words))]
	// returns word at random number index

}

func checkAndDisplayWord(word string, guessedLetters []string) string {
	var wordToDisplay string
	//word being displayed as either letters/_

	for _, letter := range word {
		//loops through and assigns letter as letter in word
		letterFound := false
		//setting as false as letter not found yet

		for _, guessedLetter := range guessedLetters {
			//lopps through guessed letters and sets guessedLetter as letter in guessedLetters
			if guessedLetter == string(letter) {
				//if letter from guessedLetter same as letter in word
				letterFound = true
				//letter has been found
				wordToDisplay += string(letter)
				//add letter to display
				break
				//breaks out of loop and moves to next letter in word
			}
		}
		if letterFound == false {
			wordToDisplay += "_"
			//if letter not found add _ to display
		}
	}
	return wordToDisplay
	//return word

}

func guessCorrect(word string, guess string) bool {
	// checking if letter guessed is inside of the word
	var found bool = false
	for _, letter := range word {
		//looping through every letter in word and comparing to guess
		if string(letter) == guess {
			// if guess is letter then found is true
			found = true
			break
			//break from loop letter found
		}
	}
	return found
}

func playHangman(word string, maxTries int, timer time.Duration) {

	var tries int = 0
	guessedLetters := []string{}
	intialTime := time.Now()

	for {
		fmt.Print("\nTries: ", maxTries-tries)
		//outputting number of tries left
		fmt.Print("\n", word) ////////tester line
		fmt.Print("\n", checkAndDisplayWord(word, guessedLetters))
		//calling display function to output word in letters/_

		timeRemaining := timer - time.Since(intialTime)
		if timeRemaining <= 0 {
			fmt.Println("\nYou ran out of tries. The word was: ", word)
			break
		}

		fmt.Println("\nEnter a letter: ")
		var guess string
		fmt.Scanf("%s", &guess)
		//scanning and storing the letter guessed
		fmt.Print("\nYou have guessed the letter ", guess) ///////tester line

		alreadyGuessed := false
		for _, letter := range guessedLetters {
			//loops through guessed letters and sets letter as letter in guessedLetters
			if letter == guess {
				//if letter from guessedLetter same as guess
				alreadyGuessed = true
				break
				//break from loop
			}
		}

		if alreadyGuessed {
			fmt.Println("\nYou already guessed that letter. Try again.")
		} else {
			guessedLetters = append(guessedLetters, guess)
			//adding to guess letter array
			if guessCorrect(word, guess) == true {
				fmt.Println("\nCorrect!")
			} else {
				fmt.Println("\nIncorrect!")
				tries += 1
			}
		}

		if maxTries == tries {
			//compares maxtries to tries
			fmt.Print("\nYou ran out of tries. The word was: ", word)
			//if same message outputted and breaks from loop
			break
		}

		if checkAndDisplayWord(word, guessedLetters) == word {
			//compares value from display function to word
			fmt.Print("\nYou guessed the word correctly: ", word)
			// if same outputs message and breaks from loop
			break

		}

	}

}

func main() {

	fmt.Println("Would you like to play the easy, medium, or hard level?")
	var level string
	fmt.Scan(&level)
  //scanning user input and storing it in level

	switch level {
    // switch case for the input of users
	case "easy":
		fmt.Println("You have chosen the easy level.")
		playHangman(chooseWord(easy_Words), 9, 30*time.Second)

	case "medium":
		fmt.Println("You have chosen the medium level.")
		playHangman(chooseWord(medium_Words), 6, 20*time.Second)

	case "hard":
		fmt.Println("You have chosen the hard level.")
		playHangman(chooseWord(hard_Words), 3, 10*time.Second)
	default:
		fmt.Println("Invalid input.")
	}
}