#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

char level[6];

// these are 2 global variables to make the word array for each level
#define Max_No_Of_Words 5
#define Max_Word_Length 15

// creating arrays of the words for each level
// max word is the number of spaces in the array
// max length is the width of each space in array
char hardWords[Max_No_Of_Words][Max_Word_Length] = {
    "dissonance", "suffrage", "liberty", "rhythm", "jazz"};

char medWords[Max_No_Of_Words][Max_Word_Length] = {
    "serenity", "purple", "brown", "reference", "activity"};

char easyWords[Max_No_Of_Words][Max_Word_Length] = {
    "feather", "green", "machine", "serene", "complete"};

// choosing random word from each level
void chooseEasyWord(char *selectedWord) {
  // passing parameter address of word
  int index = rand() % Max_No_Of_Words;
  // finding random number from maxword(5)
  // so picks random number from 0-4
  strcpy(selectedWord, easyWords[index]);
  // copying the word stored at random number into the value word
}
void chooseMedWord(char *selectedWord) {
  int index = rand() % Max_No_Of_Words;
  strcpy(selectedWord, medWords[index]);
}
void chooseHardWord(char *selectedWord) {
  int index = rand() % Max_No_Of_Words;
  strcpy(selectedWord, hardWords[index]);
}

void displaySelectedWord(char *selectedWord, char *guessedLetter) {
  // this takes in parameter of the word and the letters guessed by player
  for (int i = 0; selectedWord[i] != '\0'; i++)
  // continues if selectedword[i] is not null so won't count blank space
  {
    if (strchr(guessedLetter, selectedWord[i]) != NULL) {
      // if guessed letter matches selected[i] then print it
      // letter has been accurately guessed so it should be shown
      printf("%c", selectedWord[i]); // printing correct letter
    } else {
      printf("_"); // printing black spaces for letters not guessed
    }
  }
}

void WordGuessedCorrect(char *selectedWord, char *guessedLetter, int *result) {
  *result = 1;
  // assuming word is correct
  for (int i = 0; selectedWord[i] != '\0'; i++) {
    // looping through letters in word
    if (strchr(guessedLetter, selectedWord[i]) == NULL) {
      // checking if letter from word is in guessed letters
      *result = 0;
      // if it is null then they haven't guessed the full word
      break; // No need to continue checking if one letter is not guessed
    }
  }
}

char word[Max_Word_Length];

void timerHandler(int signal) {
  // This function is called when the timer expires
  printf("\nTime's up! Your word was: %s\n", word);
}

int main(void) {
  // makes sure rand produces a random number
  srand(time(0));
  int tries = 0;
  int max_num_tries;
  int timer;

  char selectedWord[Max_Word_Length];
  // user chooses their level
  printf("Would you like to play the easy, medium or hard level?");
  // scans user input and stores in level
  scanf("%s", level);
  // compares level to easy,medium hard and prints which level was chosen
  if (strcmp(level, "easy") == 0) {
    printf("The easy level has been chosen\n");
    chooseEasyWord(selectedWord);
    max_num_tries = 9;
    timer = 30;
  } else if (strcmp(level, "medium") == 0) {
    printf("The medium level has been chosen\n");
    chooseMedWord(selectedWord);
    max_num_tries = 6;
    timer = 20;
  } else if (strcmp(level, "hard") == 0) {
    printf("The hard level has been chosen\n");
    chooseHardWord(selectedWord);
    max_num_tries = 3;
    timer = 10;
  } else {
    // if inputs dont match level, invalid input is outputted
    printf("Invalid Input\n");
  }

  char guessedLetters[Max_Word_Length];
  // array for all the guessed letter

  strcpy(word, selectedWord);

  signal(SIGALRM, timerHandler);
  alarm(timer);

  while (1) {
    while (tries < max_num_tries) {
      printf("\nTries: %d\n", max_num_tries - tries);
      displaySelectedWord(selectedWord, guessedLetters);
      // printing how many tries user has and the word

      printf("\nEnter a letter: ");
      char guessLetter;
      scanf(" %c", &guessLetter);
      // asking user for letter and storing it in guessletter

      if (strchr(guessedLetters, guessLetter) != NULL) {
        printf("You already guessed that letter. Try again.\n");
        continue;
        // checking if the user is guessing a letter already guessed
      }

      guessedLetters[strlen(guessedLetters)] = guessLetter;
      // adding the letter to the arry of letters that already guessed

      if (strchr(selectedWord, guessLetter) == NULL) {
        printf("Incorrect!\n");
        tries++;
        // if letter is not in word then incorrect
      } else {
        printf("Correct!\n");
        // else letter is in word so correct
      }

      int wordGuessed;
      WordGuessedCorrect(selectedWord, guessedLetters, &wordGuessed);
      // calling procedure to check if word is correct
      if (wordGuessed == 1) {
        // checking is word is correct
        printf("\nYou guessed the word correctly: %s\n", selectedWord);
        abort();
        // If the word is guessed correctly, the loop is exited
      }
    }
    if (tries == max_num_tries) {
      printf("\nYou ran out of tries. The word was: %s\n", selectedWord);
      // max tries reached print word.
      abort();
    }
  }

  return 0;
}